using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Questacode1
{
    public partial class Game : Form
    {
        private int ticTacToeStatus = 0; // 0: game in progress, 1: win, 2: draw
        private string[] ticTacToeSymbols = { "0", "1", "2", "3", "4", "5", "6", "7", "8" };
        private string player1Symbol = "X";
        private string player2Symbol = "O";
        private bool isPlayer1Turn = true;
        private Button[] ticTacToeButtons;

        public Game()
        {
            InitializeComponent(); // This method is generated by the designer and creates/configures controls
            InitializeTicTacToeButtons(); // Call method to set up Tic-Tac-Toe grid buttons
            ShowMainMenu();
        }

        // Method to dynamically create Tic-Tac-Toe buttons
        private void InitializeTicTacToeButtons()
        {
            ticTacToeButtons = new Button[9];
            int buttonSize = 80;
            int spacing = 5;
            // Calculate startX and startY relative to ticTacToePanel
            int startX = (ticTacToePanel.Width - (buttonSize * 3 + spacing * 2)) / 2;
            int startY = ticTacToeTurnLabel.Bottom + 10;

            for (int i = 0; i < 9; i++)
            {
                Button btn = new Button();
                btn.Size = new Size(buttonSize, buttonSize);
                btn.Location = new Point(startX + (i % 3) * (buttonSize + spacing), startY + (i / 3) * (buttonSize + spacing));
                btn.Font = new Font("Arial", 36, FontStyle.Bold);
                btn.Tag = i; // Store the position index
                btn.Click += TicTacToeCell_Click;
                btn.BackColor = Color.White;
                btn.FlatStyle = FlatStyle.Flat;
                btn.FlatAppearance.BorderColor = Color.DarkGray;
                btn.FlatAppearance.BorderSize = 2;
                ticTacToeButtons[i] = btn;
                ticTacToePanel.Controls.Add(btn); // Add to the ticTacToePanel
            }
        }

        private void ShowMainMenu()
        {
            welcomeLabel.Visible = true;
            messageLabel.Visible = true;
            ticTacToeButton.Visible = true;
            exitButton.Visible = true;

            ticTacToePanel.Visible = false;

            messageLabel.Text = "Enter choice";
        }

        // --- Main Menu Button Click Handlers ---
        private void TicTacToeButton_Click(object sender, EventArgs e)
        {
            ShowTicTacToeGame();
        }

        private void ExitButton_Click(object sender, EventArgs e)
        {
            MessageBox.Show("Bye Bye!", "Gaming Zone", MessageBoxButtons.OK, MessageBoxIcon.Information);
            this.Close();
        }

        private void ShowTicTacToeGame()
        {
            welcomeLabel.Visible = false;
            messageLabel.Visible = false;
            ticTacToeButton.Visible = false;
            exitButton.Visible = false;

            ticTacToePanel.Visible = true;
            ResetTicTacToeGame(); // Initialize game state
        }

        private void ResetTicTacToeGame()
        {
            ticTacToeStatus = 0;
            isPlayer1Turn = true;
            ticTacToeTurnLabel.Text = "Player 1's Turn (X)";

            for (int i = 0; i < 9; i++)
            {
                ticTacToeSymbols[i] = i.ToString(); // Reset symbols to numbers
                ticTacToeButtons[i].Text = ""; // Clear button text
                ticTacToeButtons[i].Enabled = true; // Enable all buttons
                ticTacToeButtons[i].BackColor = Color.White; // Reset background color
            }
        }

        private void TicTacToeCell_Click(object sender, EventArgs e)
        {
            Button clickedButton = (Button)sender;
            int position = (int)clickedButton.Tag;

            // Check if the position is already taken
            if (ticTacToeSymbols[position] == player1Symbol || ticTacToeSymbols[position] == player2Symbol)
            {
                MessageBox.Show("This position is already taken, please select another.", "Invalid Move", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return; // Exit the method without changing turn or board
            }

            // Place symbol
            if (isPlayer1Turn)
            {
                ticTacToeSymbols[position] = player1Symbol;
                clickedButton.Text = player1Symbol;
                clickedButton.ForeColor = Color.Blue; // Player 1 color
            }
            else
            {
                ticTacToeSymbols[position] = player2Symbol;
                clickedButton.Text = player2Symbol;
                clickedButton.ForeColor = Color.Red; // Player 2 color
            }

            clickedButton.Enabled = false; // Disable the clicked button

            // Check for win or draw
            ticTacToeStatus = CheckWinOrDraw();

            if (ticTacToeStatus == 1)
            {
                string winner = isPlayer1Turn ? "Player 1 (X)" : "Player 2 (O)";
                MessageBox.Show($"{winner} wins!", "Game Over", MessageBoxButtons.OK, MessageBoxIcon.Information);
                DisableTicTacToeButtons(); // Disable all buttons after win
            }
            else if (ticTacToeStatus == 2)
            {
                MessageBox.Show("It's a Draw!", "Game Over", MessageBoxButtons.OK, MessageBoxIcon.Information);
                DisableTicTacToeButtons(); // Disable all buttons after draw
            }
            else
            {
                // Toggle player turn
                isPlayer1Turn = !isPlayer1Turn;
                ticTacToeTurnLabel.Text = isPlayer1Turn ? "Player 1's Turn (X)" : "Player 2's Turn (O)";
            }
        }

        private void DisableTicTacToeButtons()
        {
            foreach (Button btn in ticTacToeButtons)
            {
                btn.Enabled = false;
            }
        }

        private void TicTacToeResetButton_Click(object sender, EventArgs e)
        {
            ResetTicTacToeGame();
        }

        // Function to check a win or draw for Tic-Tac-Toe
        private int CheckWinOrDraw()
        {
            // Horizontal combination
            if (CheckLine(0, 1, 2)) return 1;
            if (CheckLine(3, 4, 5)) return 1;
            if (CheckLine(6, 7, 8)) return 1;

            // Vertical combination
            if (CheckLine(0, 3, 6)) return 1;
            if (CheckLine(1, 4, 7)) return 1;
            if (CheckLine(2, 5, 8)) return 1;

            // Diagonal combination
            if (CheckLine(0, 4, 8)) return 1;
            if (CheckLine(2, 4, 6)) return 1;

            // Check for draw
            bool isDraw = true;
            for (int i = 0; i < 9; i++)
            {
                if (ticTacToeSymbols[i] != "X" && ticTacToeSymbols[i] != "O") // Check if any original number is left
                {
                    isDraw = false;
                    break;
                }
            }

            if (isDraw) return 2;

            return 0; // Game in progress
        }

        // Helper for CheckWinOrDraw
        private bool CheckLine(int a, int b, int c)
        {
            return (ticTacToeSymbols[a] == ticTacToeSymbols[b] && ticTacToeSymbols[b] == ticTacToeSymbols[c]);
        }
    }
}

